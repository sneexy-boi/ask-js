name: Development Docker images
on:
    pull_request:
    push:
        branches:
          - gh-action
    workflow_dispatch:
env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
    push-ghcr:
        name: Build and push dev containers
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        strategy:
            fail-fast: false
            matrix:
              platform:
                - linux/amd64
                - linux/arm64

        steps:
            - name: Preperation
              run: |
                platform=${{ matrix.platform }}
                echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

            - name: Checkout Push to Registry action
              uses: actions/checkout@v4

            - name: Gather environment variables
              run: echo "IMAGE_NAME=ask-js" >> $GITHUB_ENV

            - name: Image Metadata
              uses: docker/metadata-action@v5
              id: meta
              with:
                  images: |
                      ${{ env.IMAGE_NAME }}
                  labels: |
                      org.opencontainers.image.title=${{ env.IMAGE_NAME }}
                      org.opencontainers.image.description=multiuser ask software

            - name: Generate tags
              id: generate-tags
              shell: bash
              run: |
                  # Generate a timestamp for creating an image version history
                  TIMESTAMP="$(date +%Y%m%d)"
                  COMMIT_TAGS=()
                  BUILD_TAGS=()
                  # Have tags for tracking builds during pull request
                  SHA_SHORT="${GITHUB_SHA::7}"
                  COMMIT_TAGS+=("pr-${{ github.event.number }}")
                  COMMIT_TAGS+=("${SHA_SHORT}")

                  BUILD_TAGS+=("${TIMESTAMP}")
                  BUILD_TAGS+=("dev")

                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      echo "Generated the following commit tags: "
                      for TAG in "${COMMIT_TAGS[@]}"; do
                          echo "${TAG}"
                      done
                      alias_tags=("${COMMIT_TAGS[@]}")
                  else
                      alias_tags=("${BUILD_TAGS[@]}")
                  fi
                  echo "Generated the following build tags: "
                  for TAG in "${BUILD_TAGS[@]}"; do
                      echo "${TAG}"
                  done
                  echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

            - name: Build Image
              id: build_image
              uses: redhat-actions/buildah-build@v2
              with:
                  containerfiles: "Dockerfile"
                  image: ${{ env.IMAGE_NAME }}
                  tags: |
                      ${{ steps.generate-tags.outputs.alias_tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  oci: false

            - name: Push To GHCR
              uses: redhat-actions/push-to-registry@v2
              id: push
              if: github.event_name != 'pull_request'
              env:
                  REGISTRY_USER: ${{ github.actor }}
                  REGISTRY_PASSWORD: ${{ github.token }}
              with:
                  image: ${{ steps.build_image.outputs.image }}
                  tags: ${{ steps.build_image.outputs.tags }}
                  registry: ${{ env.IMAGE_REGISTRY }}
                  username: ${{ env.REGISTRY_USER }}
                  password: ${{ env.REGISTRY_PASSWORD }}
                  extra-args: |
                      --disable-content-trust

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              if: github.event_name != 'pull_request'
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - uses: sigstore/cosign-installer@v3.8.1
              if: github.event_name != 'pull_request'

            - name: Sign container image
              if: github.event_name != 'pull_request'
              run: |
                  cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}@${TAGS}
              env:
                  TAGS: ${{ steps.push.outputs.digest }}
                  COSIGN_EXPERIMENTAL: false
                  COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

            - name: Echo outputs
              if: github.event_name != 'pull_request'
              run: |
                  echo "${{ toJSON(steps.push.outputs) }}"